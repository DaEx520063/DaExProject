#!/usr/bin/env python3
"""
‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏¢‡∏Å‡πÑ‡∏ü‡∏•‡πå SQL ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÜ ‡πÄ‡∏•‡πá‡∏Å‡πÜ
‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ GitHub ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå 25MB
"""

import os
import sys
from pathlib import Path

def split_sql_file(sql_file_path, max_size_mb=20):
    """
    ‡πÅ‡∏¢‡∏Å‡πÑ‡∏ü‡∏•‡πå SQL ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÜ ‡πÇ‡∏î‡∏¢‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    
    Args:
        sql_file_path (str): path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå SQL
        max_size_mb (int): ‡∏Ç‡∏ô‡∏≤‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô (MB)
    """
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå SQL ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if not os.path.exists(sql_file_path):
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå SQL: {sql_file_path}")
            return False
        
        # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå SQL
        print(f"üìñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå SQL: {sql_file_path}")
        with open(sql_file_path, 'r', encoding='utf-8') as file:
            content = file.read()
        
        # ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL
        sql_commands = [cmd.strip() for cmd in content.split(';') if cmd.strip()]
        print(f"üîß ‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL {len(sql_commands)} ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á")
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô bytes
        max_size_bytes = max_size_mb * 1024 * 1024
        
        # ‡πÅ‡∏¢‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÜ
        current_part = 1
        current_content = ""
        current_size = 0
        
        for i, command in enumerate(sql_commands):
            command_with_semicolon = command + ";\n"
            command_size = len(command_with_semicolon.encode('utf-8'))
            
            # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            if current_size + command_size > max_size_bytes and current_content:
                part_filename = f"{Path(sql_file_path).stem}_part_{current_part:03d}.sql"
                part_path = os.path.join(os.path.dirname(sql_file_path), part_filename)
                
                with open(part_path, 'w', encoding='utf-8') as part_file:
                    part_file.write(current_content)
                
                print(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà {current_part}: {part_filename} ({current_size / (1024*1024):.2f} MB)")
                
                # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏°‡πà
                current_part += 1
                current_content = command_with_semicolon
                current_size = command_size
            else:
                current_content += command_with_semicolon
                current_size += command_size
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
            if i % 1000 == 0:
                print(f"   ‚è≥ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà {i}/{len(sql_commands)}")
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
        if current_content:
            part_filename = f"{Path(sql_file_path).stem}_part_{current_part:03d}.sql"
            part_path = os.path.join(os.path.dirname(sql_file_path), part_filename)
            
            with open(part_path, 'w', encoding='utf-8') as part_file:
                part_file.write(current_content)
            
            print(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢: {part_filename} ({current_size / (1024*1024):.2f} MB)")
        
        print(f"\n‚úÖ ‡πÅ‡∏¢‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {current_part} ‡∏™‡πà‡∏ß‡∏ô")
        return True
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        return False

def merge_sql_parts(base_name, output_file):
    """
    ‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå SQL ‡∏™‡πà‡∏ß‡∏ô‡πÜ ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    
    Args:
        base_name (str): ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° _part_xxx)
        output_file (str): ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    """
    try:
        # ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏™‡πà‡∏ß‡∏ô‡πÜ ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        base_dir = Path(base_name).parent
        base_stem = Path(base_name).stem
        
        part_files = sorted(base_dir.glob(f"{base_stem}_part_*.sql"))
        
        if not part_files:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏™‡πà‡∏ß‡∏ô‡πÜ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {base_name}")
            return False
        
        print(f"üîß ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏™‡πà‡∏ß‡∏ô‡πÜ {len(part_files)} ‡πÑ‡∏ü‡∏•‡πå")
        
        # ‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå
        with open(output_file, 'w', encoding='utf-8') as output:
            for i, part_file in enumerate(part_files, 1):
                print(f"üìñ ‡∏£‡∏ß‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà {i}: {part_file.name}")
                with open(part_file, 'r', encoding='utf-8') as part:
                    output.write(part.read())
        
        print(f"‚úÖ ‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: {output_file}")
        return True
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        return False

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("‚úÇÔ∏è  ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÅ‡∏¢‡∏Å‡πÑ‡∏ü‡∏•‡πå SQL ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà")
    print("=" * 50)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå SQL ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    current_dir = Path(__file__).parent
    sql_files = list(current_dir.glob("*.sql"))
    
    if not sql_files:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå SQL ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå database")
        return
    
    print("üìÅ ‡πÑ‡∏ü‡∏•‡πå SQL ‡∏ó‡∏µ‡πà‡∏û‡∏ö:")
    for i, sql_file in enumerate(sql_files, 1):
        size_mb = sql_file.stat().st_size / (1024*1024)
        print(f"   {i}. {sql_file.name} ({size_mb:.2f} MB)")
    
    print("\nüîß ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£:")
    print("   1. ‡πÅ‡∏¢‡∏Å‡πÑ‡∏ü‡∏•‡πå SQL ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÜ")
    print("   2. ‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå SQL ‡∏™‡πà‡∏ß‡∏ô‡πÜ ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß")
    print("   3. ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
    
    while True:
        try:
            choice = input("\nüëâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (1-3): ").strip()
            
            if choice == "1":
                print("\nüìã ‡πÅ‡∏¢‡∏Å‡πÑ‡∏ü‡∏•‡πå SQL ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÜ")
                for i, sql_file in enumerate(sql_files, 1):
                    print(f"   {i}. {sql_file.name}")
                
                file_choice = input("\nüëâ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå SQL (1-{}): ".format(len(sql_files))).strip()
                try:
                    file_index = int(file_choice) - 1
                    if 0 <= file_index < len(sql_files):
                        sql_file = sql_files[file_index]
                        
                        # ‡∏ñ‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô
                        size_input = input(f"üëâ ‡∏Ç‡∏ô‡∏≤‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô (MB) [‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: 20]: ").strip()
                        max_size = 20 if not size_input else int(size_input)
                        
                        print(f"\nüîß ‡πÅ‡∏¢‡∏Å‡πÑ‡∏ü‡∏•‡πå {sql_file.name} ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÜ ‡∏Ç‡∏ô‡∏≤‡∏î {max_size} MB")
                        split_sql_file(str(sql_file), max_size)
                    else:
                        print("‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
                except ValueError:
                    print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")
                    
            elif choice == "2":
                print("\nüìã ‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå SQL ‡∏™‡πà‡∏ß‡∏ô‡πÜ ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß")
                
                # ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏™‡πà‡∏ß‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
                part_files = list(current_dir.glob("*_part_*.sql"))
                if not part_files:
                    print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏™‡πà‡∏ß‡∏ô‡πÜ")
                    continue
                
                # ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏™‡πà‡∏ß‡∏ô‡πÜ
                base_names = set()
                for part_file in part_files:
                    base_name = part_file.name.split('_part_')[0]
                    base_names.add(base_name)
                
                print("üìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏ö:")
                for i, base_name in enumerate(sorted(base_names), 1):
                    print(f"   {i}. {base_name}")
                
                base_choice = input("\nüëâ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (1-{}): ".format(len(base_names))).strip()
                try:
                    base_index = int(base_choice) - 1
                    if 0 <= base_index < len(base_names):
                        base_name = sorted(base_names)[base_index]
                        output_file = f"{base_name}_merged.sql"
                        
                        print(f"\nüîß ‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏™‡πà‡∏ß‡∏ô‡πÜ ‡∏Ç‡∏≠‡∏á {base_name} ‡πÄ‡∏õ‡πá‡∏ô {output_file}")
                        merge_sql_parts(base_name, output_file)
                    else:
                        print("‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
                except ValueError:
                    print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")
                    
            elif choice == "3":
                print("üëã ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
                break
                
            else:
                print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 1, 2, ‡∏´‡∏£‡∏∑‡∏≠ 3")
                
        except KeyboardInterrupt:
            print("\n\nüëã ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
            break
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

if __name__ == "__main__":
    main()
