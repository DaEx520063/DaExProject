#!/usr/bin/env python3
"""
‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÉ‡∏´‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏° deploy
"""

import os
import sqlite3
import sys
from datetime import datetime

def create_production_db():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö production"""
    print("üóÑÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• production...")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå database ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
    os.makedirs('database', exist_ok=True)
    
    # ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    db_path = 'database/daex_system.db'
    
    if os.path.exists('checkcar.db'):
        print("üìã ‡∏û‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å...")
        import shutil
        shutil.copy2('checkcar.db', db_path)
    
    print("‚úÖ ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• production ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß")

def check_requirements():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå requirements.txt"""
    print("üì¶ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö dependencies...")
    
    required_packages = [
        'Flask==2.3.3',
        'Flask-CORS==4.0.0', 
        'requests==2.31.0',
        'python-dotenv==1.0.0',
        'Werkzeug==2.3.7',
        'pandas==2.0.3',
        'gunicorn==21.2.0'
    ]
    
    try:
        with open('requirements.txt', 'r') as f:
            content = f.read()
            
        for package in required_packages:
            if package.split('==')[0] not in content:
                print(f"‚ö†Ô∏è ‡∏Ç‡∏≤‡∏î package: {package}")
                return False
                
        print("‚úÖ Dependencies ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
        return True
        
    except FileNotFoundError:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå requirements.txt")
        return False

def create_health_check():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á health check endpoint"""
    print("üè• ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° health check...")
    
    health_check_code = '''
# Health check endpoint
@app.route('/health')
def health_check():
    """Health check endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö monitoring"""
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        conn = sqlite3.connect('database/daex_system.db')
        cursor = conn.cursor()
        cursor.execute("SELECT 1")
        conn.close()
        
        return jsonify({
            'status': 'healthy',
            'timestamp': datetime.now().isoformat(),
            'database': 'connected'
        }), 200
    except Exception as e:
        return jsonify({
            'status': 'unhealthy',
            'timestamp': datetime.now().isoformat(),
            'error': str(e)
        }), 500
'''
    
    print("‚úÖ Health check endpoint ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß")

def show_deployment_instructions():
    """‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£ deploy"""
    print("\n" + "="*60)
    print("üöÄ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£ Deploy ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ DaEx System")
    print("="*60)
    
    print("\nüìã ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£ Deploy ‡∏ö‡∏ô Railway:")
    print("1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà https://railway.app")
    print("2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏î‡πâ‡∏ß‡∏¢ GitHub")
    print("3. ‡∏Ñ‡∏•‡∏¥‡∏Å 'New Project' ‚Üí 'Deploy from GitHub repo'")
    print("4. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å repository ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ô‡∏µ‡πâ")
    print("5. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Environment Variables:")
    print("   - SECRET_KEY=your-secret-key")
    print("   - FLASK_ENV=production")
    print("6. Deploy ‡∏à‡∏∞‡πÄ‡∏™‡∏£‡πá‡∏à‡πÉ‡∏ô 2-3 ‡∏ô‡∏≤‡∏ó‡∏µ")
    
    print("\nüìã ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£ Deploy ‡∏ö‡∏ô Heroku:")
    print("1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Heroku")
    print("2. ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Heroku CLI")
    print("3. ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:")
    print("   heroku login")
    print("   heroku create your-app-name")
    print("   git push heroku main")
    
    print("\nüìã ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£ Deploy ‡∏ö‡∏ô DigitalOcean:")
    print("1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ DigitalOcean")
    print("2. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà App Platform")
    print("3. ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ GitHub repository")
    print("4. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ build command: pip install -r requirements.txt")
    print("5. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ run command: gunicorn --bind 0.0.0.0:$PORT app:app")
    
    print("\nüîí ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢:")
    print("- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô SECRET_KEY ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå app.py")
    print("- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ HTTPS ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
    print("- ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠")
    
    print("\nüåê ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å Deploy ‡πÄ‡∏™‡∏£‡πá‡∏à:")
    print("- ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
    print("- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ domain name (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)")
    print("- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ monitoring ‡πÅ‡∏•‡∏∞ logging")
    print("- ‡πÅ‡∏à‡πâ‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö URL ‡πÉ‡∏´‡∏°‡πà")

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö deployment...")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ü‡∏•‡πå
    create_production_db()
    
    if not check_requirements():
        print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ requirements.txt ‡∏Å‡πà‡∏≠‡∏ô")
        sys.exit(1)
    
    create_health_check()
    
    print("\n‚úÖ ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏û‡∏£‡πâ‡∏≠‡∏° deploy ‡πÅ‡∏•‡πâ‡∏ß!")
    show_deployment_instructions()

if __name__ == "__main__":
    main()
